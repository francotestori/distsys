/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package model.wishlist;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WishListEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WishListEvent\",\"namespace\":\"model.wishlist\",\"fields\":[{\"name\":\"item\",\"type\":{\"type\":\"record\",\"name\":\"WishListItem\",\"fields\":[{\"name\":\"productId\",\"type\":\"string\"},{\"name\":\"client\",\"type\":\"string\"}]}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Event\",\"symbols\":[\"ADD\",\"REMOVE\"]}},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public model.wishlist.WishListItem item;
  @Deprecated public model.wishlist.Event type;
  @Deprecated public long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public WishListEvent() {}

  /**
   * All-args constructor.
   */
  public WishListEvent(model.wishlist.WishListItem item, model.wishlist.Event type, java.lang.Long timestamp) {
    this.item = item;
    this.type = type;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return item;
    case 1: return type;
    case 2: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: item = (model.wishlist.WishListItem)value$; break;
    case 1: type = (model.wishlist.Event)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'item' field.
   */
  public model.wishlist.WishListItem getItem() {
    return item;
  }

  /**
   * Sets the value of the 'item' field.
   * @param value the value to set.
   */
  public void setItem(model.wishlist.WishListItem value) {
    this.item = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public model.wishlist.Event getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(model.wishlist.Event value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /** Creates a new WishListEvent RecordBuilder */
  public static model.wishlist.WishListEvent.Builder newBuilder() {
    return new model.wishlist.WishListEvent.Builder();
  }
  
  /** Creates a new WishListEvent RecordBuilder by copying an existing Builder */
  public static model.wishlist.WishListEvent.Builder newBuilder(model.wishlist.WishListEvent.Builder other) {
    return new model.wishlist.WishListEvent.Builder(other);
  }
  
  /** Creates a new WishListEvent RecordBuilder by copying an existing WishListEvent instance */
  public static model.wishlist.WishListEvent.Builder newBuilder(model.wishlist.WishListEvent other) {
    return new model.wishlist.WishListEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for WishListEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WishListEvent>
    implements org.apache.avro.data.RecordBuilder<WishListEvent> {

    private model.wishlist.WishListItem item;
    private model.wishlist.Event type;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(model.wishlist.WishListEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(model.wishlist.WishListEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.item)) {
        this.item = data().deepCopy(fields()[0].schema(), other.item);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing WishListEvent instance */
    private Builder(model.wishlist.WishListEvent other) {
            super(model.wishlist.WishListEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.item)) {
        this.item = data().deepCopy(fields()[0].schema(), other.item);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'item' field */
    public model.wishlist.WishListItem getItem() {
      return item;
    }
    
    /** Sets the value of the 'item' field */
    public model.wishlist.WishListEvent.Builder setItem(model.wishlist.WishListItem value) {
      validate(fields()[0], value);
      this.item = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'item' field has been set */
    public boolean hasItem() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'item' field */
    public model.wishlist.WishListEvent.Builder clearItem() {
      item = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public model.wishlist.Event getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public model.wishlist.WishListEvent.Builder setType(model.wishlist.Event value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type' field */
    public model.wishlist.WishListEvent.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public model.wishlist.WishListEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'timestamp' field */
    public model.wishlist.WishListEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public WishListEvent build() {
      try {
        WishListEvent record = new WishListEvent();
        record.item = fieldSetFlags()[0] ? this.item : (model.wishlist.WishListItem) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (model.wishlist.Event) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
